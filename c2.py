import click
import shutil
import pandas as pd
import os

@click.group()
@click.version_option(version="2.0.0")
def cli():
    """CLI utility for Cifera2: evaluation and classification of the genres of audio clips."""
    pass

@cli.command()
@click.argument('paths', nargs=-1)
def cat(paths):
    """Concatenates multiple .csv files while preserving header. Outputs finished file into Cifera2 directory."""
    if len(paths) < 2:
        click.secho("Insufficient arguments. At least two file paths are needed to concatenate.", bold=True, fg='red')
        exit()
    merged_data = pd.DataFrame()
    for path in paths:
        path = os.path.abspath(path)
        merged_data = pd.concat([merged_data, pd.read_csv(path)], ignore_index=True)
    merged_data.to_csv('merged_data.csv', index=False)

@cli.command()
@click.argument('path', type=click.STRING)
@click.option('--genre', type=str, default='unknown', show_default=True, help="Genre of the audio file. Highly recommended if the resulting formatted file(s) will be used to train a Cifera2 model.")
def format(path, genre):
    """Formats the first 30 seconds of an unformatted audio file to a form that can be evaluated by a Cifera2 model."""
    if genre == 'unknown':
        click.secho("Note: It is REQUIRED to specify genre if you are planning on using the resulting formatted audio to train a Cifera2 model.", fg="yellow", bold=True)
    from Cifera2 import audio_format
    audio_format(path, genre)

@cli.command()
@click.argument('path', type=click.STRING)
@click.option('--genre', type=str, default='unknown', show_default=True, help="Genre of the audio files. Highly recommended if the resulting formatted file(s) will be used to train a Cifera2 model.")
@click.option('--seperate', is_flag=True, help="Seperate each formatted file into its own .csv file, instead of all in one.")
def batchformat(path, seperate, genre):
    """Formats the first 30 seconds of each unformatted audio file within the given folder to a form that can be evaluated by a Cifera2 model."""
    if genre == 'unknown':
        click.secho("Note: It is HIGHLY RECOMMENDED to specify genre if you are planning on using the resulting formatted audio to train a Cifera2 model.", fg="yellow", bold=True)
    from Cifera2 import audio_batch_format
    audio_batch_format(path, seperate, genre)


@cli.command()
@click.argument('path', type=click.STRING)
@click.option('--graph', is_flag=True, help="Enable output of confidence graph.")
def evaluate(path, graph):
    """Evaluates the audio clip at the given path using the selected model (see config.json or readme.txt)."""
    from Cifera2 import audio_evaluate, plot_value_array
    predictions, labels, label = audio_evaluate(path)
    if graph:
        click.echo("Graph output enabled.")
        plot_value_array(predictions, labels)
    click.echo(f"The model predicts: \"{label[0]}\"")

@cli.command()
@click.option('--name', type=click.STRING, default=None, show_default=False, help="Custom name for the new Cifera2 model.")
@click.option('--data', type=click.STRING, default=None, show_default=False, help="Path to a CSV file containing formatted audio data for additional training")
@click.option('--exclude-builtin-dataset', is_flag=True, help="Exclude the dataset included with Cifera2 when training.")
def generate(name, data, exclude_builtin_dataset):
    """Generates a new Cifera2 model and dependencies."""
    from Cifera2_gen import model_gen
    model_gen(name, data, exclude_builtin_dataset)

@cli.command()
def purge():
    """Removes all model and artifact files generated by Cifera2's model generation feature."""
    if click.prompt("This will delete all model and artifact files. Are you sure you wish to proceed? (Y/n) ").lower() == "y":
        try:
            shutil.rmtree('.\\artifacts')
            shutil.rmtree('.\\models')
            click.echo(f"Directories and contents deleted successfully.")
        except OSError as e:
            click.secho(f"Error deleting directory: {e}", bold=True, fg="red")
    else:
        click.secho("Action aborted. No files have been affected.", bold=True, fg="yellow")


if __name__ == '__main__':
    cli()